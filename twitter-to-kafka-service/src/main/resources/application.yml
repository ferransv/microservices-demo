#the application.yaml file in the Twitter to Kafka service emptied, otherwise it will overwrite
#the configuration in the config server that is defined in the repository, because it was configured overriding
#properties in the config-client.yml file.

#!!!!When the twitter-to-kafka micros. is NOT running in a CONTAINER (running alone), we have to UNCOMMENT what is UNDER these lines,
#because when the micros. is running alone it cannot communicate with the containerized config-server to get the config properties:
#analogously for the other microservices!

#server:
#  port: 8181
#
#twitter-to-kafka-service:
#  twitter-keywords:
#    - Java
#    - Microservices
#    - Kafka
#    - Elasticsearch
#  welcome-message: Hello microservices!
#  enable-mock-tweets: false
#  mock-min-tweet-length: 5
#  mock-max-tweet-length: 15
#  mock-sleep-ms: 10000
#  enable-v2-tweets: true
#  twitter-v2-base-url: https://api.twitter.com/2/tweets/search/stream?tweet.fields=created_at&expansions=author_id
#  twitter-v2-rules-base-url: https://api.twitter.com/2/tweets/search/stream/rules
#  twitter-v2-bearer-token: ${TWITTER_BEARER_TOKEN}
#
#retry-config:
#  initial-interval-ms: 1000
#  max-interval-ms: 10000
#  multiplier: 2.0
#  maxAttempts: 3
#  sleep-time-ms: 2000
#
#kafka-config:
#  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
#  schema-registry-url-key: schema.registry.url
#  schema-registry-url: http://localhost:8081
#  topic-name: twitter-topic
#  topic-names-to-create:
#    - twitter-topic
#  num-of-partitions: 3
#  replication-factor: 3
#
#kafka-producer-config:
#  key-serializer-class: org.apache.kafka.common.serialization.LongSerializer
#  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
#  compression-type: snappy #For compression, we chose Snappy among options GZIP None, LZ4.
#  #Snappy is a compression library from Google, and it is faster than other options, but it provides less compression to accomplish this.
#  acks: all  #we choose all because we want to get acknowledgments from all replicas to be more resilient
#  batch-size: 16384
#  batch-size-boost-factor: 100
#  linger-ms: 5 #added a delay to producer client to wait before sending the records and send more data at once.
#  request-timeout-ms: 60000 #after 60 seconds, if no acknowledgement comes, producer will throw timeout error
#  retry-count: 5 # producer will retry five times in case of error