#We then need to add a bootstrap yaml file here to set up *spring cloud properties*, as the fetching
#of configuration from config server **should be before loading the application configuration (application.yml)**.

#This 'config-client' here is important because we use this prefix in the configuration files of config server repository.
#So if you look at the config-server-repository directory, you will see a file, config-client-twitter_to_kafka.
spring:
  application:
    name: twitter-to-kafka-service
  profiles:
    active: twitter_to_kafka
  cloud:
    config:
      name: twitter-to-kafka-service,config-client #That means we want to get the data from
                                                   #that configuration file for Twitter-to-Kafka-service
                                                   #(concretely from the config-server-repository directory)
      uri: http://localhost:8888 #in which port the config server is running
      #user/password of our Config Server
      username: spring_cloud_user
      password: ENC(J61cMappIHgzgiTXuSbtsygJXhzmE9toRVPq/7s1sfeZ3lqJvVenpge7eHJ5cJwvRKT3ryPyRhfo+7S5z6jT/A==)
                                    #encrypted password of springCloud_Pwd! in ENC()

#  Now we need to add Jasypt encrypter password CONFIGURATION to the bootstrap yaml file to be able
#  to decrypt these passwords at runtime.
#jasypt:
#  encryptor:
#    password: Demo_Pwd!2020 #Better than pass it here directly(like it is here in commented out),
#    ->pass this key when the application starts through env var, or LIKE IT IS IN THIS APP, throug Arg variables..
#      # Need to provide the encrypter password (the master key) to be able
#                            # to decrypt these passwords at runtime. This value could better come through JVM parameters
#                            # or ENV VARIABLES
#    algorithm: PBEWithHMACSHA512AndAES_256