#We then need to add a bootstrap yaml file here to set up *spring cloud properties*, as the fetching
#of configuration from config server **should be before loading the application configuration (application.yml)**.

#This 'config-client' here is important because we use this prefix in the configuration files of config server repository.
#So if you look at the config-server-repository directory, you will see a file, config-client-twitter_to_kafka.
spring:
  application:
    name: twitter-to-kafka-service
  profiles:
    active: twitter_to_kafka
  cloud:
    config:
      #That means we want to get the data from
      #that configuration file for Twitter-to-Kafka-service
      #(concretely from the config-server-repository directory)
      name: twitter-to-kafka-service,config-client
      #in which port the our config server is running #Achtung!!!
      uri: http://localhost:8888
      #... and its config-server user/password
      username: spring_cloud_user
#      password: springCloud_Pwd!
      password: ENC(Ee97MGhH7kW4cw4gJtMCY57oBlyINtSl7sIc6T8ljlS61DRlTwBiDZ+F+PWM3i4oLVr01LXz82Q7jNQCSbSRvg==)
                                    #!!!encryption of of springCloud_Pwd! password/key  in ENC()

#  Now we need to add Jasypt encrypter password CONFIGURATION to the bootstrap yaml file to be able
#  to DECRYPT with this KEY the config-server password at runtime.
jasypt:
  encryptor:
    password: Demo_Pwd!2020
    #Better than pass it here directly(like it is here in commented out),
#    ->Preferable solution to be used: pass this key when the application starts through env var, or LIKE IT IS IN THIS APP, throug Arg variables..
#      # Need to provide the encrypter password (the master key) to be able
#                            # to decrypt these passwords at runtime. This value could better come through JVM parameters
#                            # or ENV VARIABLES
#    algorithm: PBEWithHMACSHA512AndAES_256